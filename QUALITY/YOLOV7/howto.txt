# First clone repository
git clone https://github.com/WongKinYiu/yolov7.git
use yolov7.pt as weights for the pre-trained model
create virtualenv yolov7
install pip3 requirements as per the requirements.txt
execute sh script for computing yolov7 across different mp4s
Example
./process_yolo_out_3.sh /home/xruser/TOD/TESIS/QUALITY2.0/YOLOV7/yolov7/all_mp4
The only parameter is a directory with mp4 files

For every mp4 file the following output files will be generated
It is supposed the dir contains the same video encoded with different bitrates and encoding input parameters

For evey conf (confidence) and img_size(inference window size) as per hardcoded in sh file 
  Example: 
            confs=("0.25" "0.30")
            img_sizes=("640")

For conf=0.25
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.25_640.csv - CSV file with the objects of interest and inference time (all frames)
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.25_640.single_average.csv - Average of all frames
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.25_640.txt - Full output of yolov7 detect (all frames)

For conf=0.30
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.30_640.csv
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.30_640.single_average.csv
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4_0.30_640.txt
sequence04_straight_city_50kmh_900_preset_4_rc_mode_5.ts.mp4.csv

Finally a csv file with the average for all mp4 outputs at a given combination of conf and img_size will be generated

-rw-rw-r--  1 xruser xruser      908 ago 29 19:47 combined_average_0.25_640.csv - For 0.25 and 640
-rw-rw-r--  1 xruser xruser      907 ago 29 19:47 combined_average_0.30_640.csv - For 0.30 and 640

combined_average_0.25_640.csv
BITRATE,FRAME,CARS,BICYCLES,MOTORCYCLES,BUSES,TRUCKS,TRAFFIC_LIGHTS,PERSONS,STOP_SIGNS,INFERENCE_TIME_MS
997.0,154.0,4.553746,0.0,0.003257,0.035831,0.390879,0.345277,0.052117,0.0,8.050814
1513.0,154.0,4.86645,0.0,0.0,0.006515,0.2443,0.371336,0.074919,0.0,8.275244
2018.0,154.0,5.250814,0.003257,0.0,0.019544,0.234528,0.351792,0.091205,0.0,8.392834
454.0,154.0,2.690554,0.0,0.0,0.084691,0.674267,0.381107,0.019544,0.0,8.306189
454.0,154.0,2.690554,0.0,0.0,0.084691,0.674267,0.381107,0.019544,0.0,8.457003
500.0,154.0,3.228013,0.0,0.0,0.052117,0.557003,0.345277,0.029316,0.0,8.3557
586.0,154.0,3.540717,0.0,0.0,0.04886,0.560261,0.345277,0.039088,0.0,8.5557
677.0,154.0,3.869707,0.0,0.0,0.04886,0.615635,0.325733,0.042345,0.0,8.306189
781.0,154.0,4.208469,0.0,0.003257,0.052117,0.576547,0.335505,0.055375,0.0,8.250489
874.0,154.0,4.309446,0.0,0.003257,0.039088,0.462541,0.358306,0.042345,0.0,8.144625

combined_average_0.30_640.csv
997.0,154.0,4.283388,0.0,0.0,0.035831,0.289902,0.315961,0.039088,0.0,8.036156
1513.0,154.0,4.602606,0.0,0.0,0.006515,0.162866,0.348534,0.061889,0.0,8.399349
2018.0,154.0,4.863192,0.003257,0.0,0.019544,0.169381,0.325733,0.078176,0.0,8.322801
454.0,154.0,2.449511,0.0,0.0,0.065147,0.52443,0.368078,0.009772,0.0,8.609446
454.0,154.0,2.449511,0.0,0.0,0.065147,0.52443,0.368078,0.009772,0.0,8.470358
500.0,154.0,2.944625,0.0,0.0,0.039088,0.42671,0.306189,0.022801,0.0,8.205212
586.0,154.0,3.306189,0.0,0.0,0.039088,0.452769,0.319218,0.029316,0.0,8.326384
677.0,154.0,3.602606,0.0,0.0,0.035831,0.465798,0.306189,0.039088,0.0,8.342671
781.0,154.0,3.882736,0.0,0.003257,0.039088,0.498371,0.29316,0.045603,0.0,8.256352
874.0,154.0,4.078176,0.0,0.003257,0.032573,0.322476,0.32899,0.035831,0.0,8.152769


And the tlast step is generating with matplotlib graphs of bitrate vs average of object detections for every conf and img_size
-rw-rw-r--  1 xruser xruser   108430 ago 30 07:41 combined_average_0.30_640.csv.png
-rw-rw-r--  1 xruser xruser   108545 ago 30 07:43 combined_average_0.25_640.csv.png
